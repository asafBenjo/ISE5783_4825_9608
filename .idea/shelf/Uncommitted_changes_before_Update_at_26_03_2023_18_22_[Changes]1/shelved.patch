Index: src/primitives/Vector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package primitives;\r\n\r\nimport primitives.Point;\r\n\r\npublic class Vector extends Point{\r\n\r\n    public Vector (double x,double y,double z)\r\n    {\r\n        super(x,y,z);\r\n        if(xyz.equals(primitives.Double3.ZERO))\r\n        {\r\n            throw new IllegalArgumentException(\"vector canoot be zero\");\r\n        }\r\n    }\r\n    Vector (primitives.Double3 double3)\r\n    {\r\n       this(double3.d1,double3.d1,double3.d1);\r\n    }\r\n    public double lengthSquared()\r\n    {\r\n        double dx=xyz.d1;\r\n        double dy=xyz.d2;\r\n        double dz=xyz.d3;\r\n        return dx*dx+dy*dy+dz*dz;\r\n    }\r\n    public double length()\r\n    {\r\n        return Math.sqrt(lengthSquared());\r\n    }\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (!(o instanceof Vector v)) return false;\r\n        return xyz.equals(v.xyz);\r\n    }\r\n    public Vector normalize()\r\n    {\r\n        double len=length();\r\n        return new Vector(xyz.reduce(len));\r\n    }\r\n    public Vector add(Vector v)\r\n    {\r\n\r\n    }\r\n    public Vector scale(int t)\r\n    {\r\n        //xyz.d1=t* xyz.d1;\r\n       // xyz.d2=t* xyz.d2;\r\n       // xyz.d3=t* xyz.d3;\r\n        return (t*xyz.d1,t*xyz.d2,t*xyz.d3);\r\n    }\r\n    public int dotProduct(Vector v)\r\n    {\r\n\r\n    }\r\n    public Vector crossProduct(Vector v)\r\n    {\r\n\r\n    }\r\n    public double lengthSquared()\r\n    {\r\n\r\n    }\r\n    public double length()\r\n    {\r\nthrow new RuntimeException(\"not implemented\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/primitives/Vector.java b/src/primitives/Vector.java
--- a/src/primitives/Vector.java	
+++ b/src/primitives/Vector.java	
@@ -39,7 +39,7 @@
     }
     public Vector add(Vector v)
     {
-
+        return new Vector (xyz.d1+v.xyz.d1,xyz.d2+v.xyz.d2,xyz.d3+v.xyz.3);
     }
     public Vector scale(int t)
     {
Index: src/primitives/Double3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package primitives;\r\n\r\nimport static primitives.Util.isZero;\r\n\r\n/** This class will serve all primitive classes based on three numbers\r\n * @author Dan Zilberstein */\r\npublic class Double3 {\r\n    /** First number */\r\n    final double                d1;\r\n    /** Second number */\r\n    final double                d2;\r\n    /** Third number */\r\n    final double                d3;\r\n\r\n    /** Zero triad (0,0,0) */\r\n    public static final Double3 ZERO = new Double3(0, 0, 0);\r\n\r\n    /** One's triad (1,1,1) */\r\n    public static final Double3 ONE  = new Double3(1, 1, 1);\r\n\r\n    /** Constructor to initialize Double3 based object with its three number values\r\n     * @param d1 first number value\r\n     * @param d2 second number value\r\n     * @param d3 third number value */\r\n    public Double3(double d1, double d2, double d3) {\r\n        this.d1 = d1;\r\n        this.d2 = d2;\r\n        this.d3 = d3;\r\n    }\r\n\r\n    /** Constructor to initialize Double3 based object the same number values\r\n     * @param value number value for all 3 numbers */\r\n    public Double3(double value) {\r\n        this.d1 = value;\r\n        this.d2 = value;\r\n        this.d3 = value;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) return true;\r\n        if (obj instanceof Double3 other)\r\n            return isZero(d1 - other.d1)\r\n                    && isZero(d2 - other.d2)\r\n                    && isZero(d3 - other.d3);\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() { return (int) Math.round(d1 + d2 + d3); }\r\n\r\n    @Override\r\n    public String toString() { return \"(\" + d1 + \",\" + d2 + \",\" + d3 + \")\"; }\r\n\r\n    /** Sum two floating point triads into a new triad where each couple of numbers\r\n     * is summarized\r\n     * @param  rhs right handle side operand for addition\r\n     * @return     result of add */\r\n    public Double3 add(Double3 rhs) {\r\n        return new Double3(d1 + rhs.d1, d2 + rhs.d2, d3 + rhs.d3);\r\n    }\r\n\r\n    /** Subtract two floating point triads into a new triad where each couple of\r\n     * numbers is subtracted\r\n     * @param  rhs right handle side operand for addition\r\n     * @return     result of add */\r\n    public Double3 subtract(Double3 rhs) {\r\n        return new Double3(d1 - rhs.d1, d2 - rhs.d2, d3 - rhs.d3);\r\n    }\r\n\r\n    /** Scale (multiply) floating point triad by a number into a new triad where\r\n     * each\r\n     * number is multiplied by the number\r\n     * @param  rhs right handle side operand for scaling\r\n     * @return     result of scale */\r\n    public Double3 scale(double rhs) {\r\n        return new Double3(d1 * rhs, d2 * rhs, d3 * rhs);\r\n    }\r\n\r\n    /** Reduce (divide) floating point triad by a number into a new triad where each\r\n     * number is divided by the number\r\n     * @param  rhs right handle side operand for reducing\r\n     * @return     result of scale */\r\n    public Double3 reduce(double rhs) {\r\n        return new Double3(d1 / rhs, d2 / rhs, d3 / rhs);\r\n    }\r\n\r\n    /** Product two floating point triads into a new triad where each couple of\r\n     * numbers is multiplied\r\n     * @param  rhs right handle side operand for product\r\n     * @return     result of product */\r\n    public Double3 product(Double3 rhs) {\r\n        return new Double3(d1 * rhs.d1, d2 * rhs.d2, d3 * rhs.d3);\r\n    }\r\n\r\n    /** Checks whether all the numbers are lower than a test number\r\n     * @param  k the test number\r\n     * @return   true if all the numbers are less than k, false otherwise */\r\n\r\n    public boolean lowerThan(double k) {\r\n        return d1 < k && d2 < k && d3 < k;\r\n    }\r\n\r\n    /** Checks whether all the numbers are lower than three numbers in another triad\r\n     * @param  other other triad\r\n     * @return       true if all the numbers are less that appropriate numbers in\r\n     *               other\r\n     *               triad, false otherwise */\r\n    public boolean lowerThan(Double3 other) {\r\n        return d1 < other.d1 && d2 < other.d2 && d3 < other.d3;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/primitives/Double3.java b/src/primitives/Double3.java
--- a/src/primitives/Double3.java	
+++ b/src/primitives/Double3.java	
@@ -6,11 +6,11 @@
  * @author Dan Zilberstein */
 public class Double3 {
     /** First number */
-    final double                d1;
+     double                d1;
     /** Second number */
-    final double                d2;
+     double                d2;
     /** Third number */
-    final double                d3;
+     double                d3;
 
     /** Zero triad (0,0,0) */
     public static final Double3 ZERO = new Double3(0, 0, 0);
